package id.ac.itats.skripsi.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import id.ac.itats.skripsi.orm.Road;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ROAD.
*/
public class RoadDao extends AbstractDao<Road, Long> {

    public static final String TABLENAME = "ROAD";

    /**
     * Properties of entity Road.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RoadID = new Property(0, Long.class, "roadID", true, "ROAD_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
    };


    public RoadDao(DaoConfig config) {
        super(config);
    }
    
    public RoadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ROAD' (" + //
                "'ROAD_ID' INTEGER PRIMARY KEY ," + // 0: roadID
                "'NAME' TEXT);"); // 1: name
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ROAD_ROAD_ID_NAME ON ROAD" +
                " (ROAD_ID,NAME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ROAD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Road entity) {
        stmt.clearBindings();
 
        Long roadID = entity.getRoadID();
        if (roadID != null) {
            stmt.bindLong(1, roadID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Road readEntity(Cursor cursor, int offset) {
        Road entity = new Road( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // roadID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Road entity, int offset) {
        entity.setRoadID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Road entity, long rowId) {
        entity.setRoadID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Road entity) {
        if(entity != null) {
            return entity.getRoadID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
